" -*- coding: utf-8 -*-
"3.8.1 (created: 2013/11/21 23:49:14)

" {{{ Options
" Set hint chars.
set hintchars=aoeuhtnsid

" User styles as colorschemes in Vimperator 2
"colorscheme zenburn

" Window title
set titlestring=Firefox

" No toolbars or menus by default
set toolbars=noaddons,nobookmarks,nomenu,nonavigation,tabs

" Elements of the status line
set status=input,location,tabcount,position

" Editor, C-i invokes it in text fields
set editor=emacs

" Command line and search patterns history
set history=10000

" Show pattern matches as you type
"set incsearch

" Hilight previous search pattern matches
"set hlsearch

" Override ignorecase if pattern has uppercase chars
set smartcase

" Focus content after a page has loaded
set focuscontent

" Show destination links in 1=status line, 2=command line, 0=none (FF4 baloon)
"set showstatuslinks=0

" Ex commands output in a new tab by default (prefs, addons...)
"set newtab=all

" Internal default search engine is ignored, plugins are used
"set ds=yubnub
" }}}


" {{{ Key bindings
"     - Emacs GTK key-theme and FF already provide bindings for input fields
" 
" M-x enters command mode
noremap <A-x> :

" Emacs navigation in command line and insert mode
cmap <C-n> <Tab>
cmap <C-p> <S-Tab>
cmap <C-f> <Right>
cmap <C-b> <Left>
cmap <C-j> <CR>
noremap <C-j> <CR>
inoremap <C-j> <CR>
inoremap <C-n> <Down>
inoremap <C-p> <Up>
inoremap <C-f> <Right>
inoremap <C-b> <Left>

" Use C-f and C-b for tab browsing
noremap <C-f> <C-n>
noremap <C-b> <C-p>

" Use C-a and C-e to jump to first/last tab
"noremap <C-a> g0
"noremap <C-e> g$
"
" Or use them to go to the absolute left/right of the document
noremap <C-a> 0
noremap <C-e> $

" Use C-p and C-n for up/down
noremap <C-p> 2k
noremap <C-n> 2j

" Use C-v and M-v for jump scrolling
noremap <C-v> <C-d>
noremap <A-v> <C-u>

" Goto the top of the document with M-<
noremap <A-<> gg

" Goto the end of the document with M->
noremap <A->> G

" Use C-s and C-r for searching (n/N for next/prev as in less)
noremap <C-s> /
noremap <C-r> ?

" Copy the current URL to the clipboard with M-w
noremap <A-w> y
"
" Copy selected text to the clipboard with C-w 
noremap <C-w> Y

" Paste the current clipboard selection to a new buffer with C-y
noremap <C-y> P

" Use current URL as a start for a new location with C-x C-v
noremap <C-x><C-v> O

" C-g as cancel (C-q is stop)
cmap <C-g> <Esc>
imap <C-g> <Esc>
noremap <C-g> <Esc>

" Avoid Find dialog when canceling a started command, C-x C-g
noremap <C-x><C-g> <Esc>
"
" Avoid quit on C-q, and it's more suitable for Stop here
noremap <C-q> :stop<CR>

" Kill the buffer with C-x k
noremap <C-x>k d

" Undo close tab with C-_ (also with C-Shift-t, as C-t is new tab)
noremap <C-_> u

" Exit and save the session with C-x C-c
noremap <C-x><C-c> ZZ

" Buffer lists with C-x b and C-x C-b
noremap <C-x>b b
noremap <C-x><C-b> B

" Open a link in a new tab with C-x t
" Open a link in the current tab with C-x l
noremap <C-x>t :t<SPACE>
noremap <C-x>l :o<SPACE>

" Open hints in new tab by default (switch roles of f and F)
"noremap f F
"noremap F f

" Open hints by e/E
noremap e f
noremap E F

" Switch hints to letter "j", for right hand usage
"noremap j f
"noremap J F
"
" Extended hint mode with M-j
"  ; - focus link, a - save, y - copy link, O - :open query, T - for :tabopen ...
noremap <A-j> ;

" We can now also use F for b/f as back/forward
noremap f L
noremap b H

" Back with Backspace as well
map <BS> H

" Use C-h i to start help
noremap <C-h>i :help<CR>

" Record a key sequence into a macro with C-x (
noremap <C-x>( q

" Play a macro with C-x e
noremap <C-x>e @

" Set a mark at the cursor with C-x r m
noremap <C-x>rm m

" Jump to the mark in the current buffer with C-x r b
noremap <C-x>rb '

" C-v was pass-next, remap to bind with default keys
noremap <C-d> <C-v>
"
" C-x C-f starts the "Open File" dialog (C-x C-s is Save)
map <C-x><C-f> <C-d><C-o>


"" {{{ Personal key bindings
""
"" M-Up/Dn toggles the toolbar and scrollbars
"map <A-Down> :set toolbars=navigation<CR>
"map <A-Up> :set toolbars=nonavigation<CR>
"
"" Sidebar selection with s, close with S
"map s :sidebar<SPACE>
"map S :sbclose<CR>
"
"" Dialog selection with d
"map d :dialog<SPACE>
"
"" Focus the address bar with C-l
"map <C-l> <C-d><C-l>
"
"" Focus last used input field with C-c i
"map <C-c>i gi
"
"" Add a bookmark with C-c a (dialog)
"map <C-c>a <C-d><C-d>
"
"" Bookmarks search, and search by tag
"map <C-c>q :bmarks<SPACE>
"map <C-c>w :bmarks -tags=
"
"" View source with C-c g, and
"map <C-c>g gf
"" ... in an editor with C-c e
"map <C-c>e gF
"
"" Open picture location with C-c p
"map <C-c>p ;i
"
"" Open context menu with C-c m
"map <C-c>m ;c
"
"" Open home directory with C-c f
"map <C-c>f ~
"
"" Go to home page with C-c h
"map <C-c>h gh
"
"" Go to parent directory with C-c u
"map <C-c>u gu
"
"" Go to the root of the website with C-c C-u
"map <C-c><C-u> gU
"
"" Restart with C-c C-r
"map <C-c><C-r> :restart<CR>
"
"" Tab moving helpers
"map <A-m> :tabmove<SPACE>
"map <A-Left> :tabmove! -1<CR>
"map <A-Right> :tabmove! +1<CR>
"" }}}

" {{{ Old settings

"cmap <C-g> <Esc>
"imap <C-g> <Esc>
"map <C-g> <Esc>
"map <C-x><C-g> <Esc>
"map <C-q> :stop<Return>
"map <C-x>k d
"map <C-x><C-c> ZZ
"map <C-x>b b
"map <C-x><C-b> B
"map <C-x>t :t<Space>
"map <C-x>l :o<Space>
"map f L
"map b H
"map e f
"map E F
"nmap h h
"nmap t j
"nmap n k
"nmap s l
"set editor=emacs
"set titlestring=Firefox
"source! /home/kaoru/.vimperatorrc.local

" }}}

js <<EOM
   liberator.registerObserver(
   'enter',
   function() {
    //Mappings.addUserMap([modes.HINTS], ["<C-g>"], "testtesttest", action, extra)
    //mappings.addUserMap(modes.all, ["<C-g>"], "Test Test Test", function () { events.onEscape(); });
    
	//Mappings.addUserMap([modes.HINTS], ["<C-g>"], "testtesttest", action, extra)
	mappings.add(modes.all, ["<C-g>"], "Emacs-like escape method", function () { events.onEscape(); });
        ///events.onKeyPress.isEscapeKey = ( function() { return function(key) { alert('bowwow'); key == "<Esc>" || key == "<C-[>" || key == "<C-g>"; }; } )();



	events.onKeyPress = ( function() { return function (event) {
        function isEscapeKey(key) key == "<Esc>" || key == "<C-[>" || key == "<C-g>";

        function killEvent() {
            event.preventDefault();
            event.stopPropagation();
        }

        function updateCount(value) {
            events._input.count = parseInt(value, 10);
            if (isNaN(events._input.count))
                events._input.count = null;
        }

        let key = events.toString(event);
        if (!key)
             return;

        let url = typeof(buffer) != "undefined" ? buffer.URL : "";

        if (modes.isRecording) {
            if (key == "q" && liberator.mode != modes.INSERT && liberator.mode != modes.TEXTAREA) { // TODO: should not be hardcoded
                modes.isRecording = false;
                liberator.echomsg("Recorded macro '" + this._currentMacro + "'");
                killEvent();
                return;
            }
            else if (!mappings.hasMap(liberator.mode, this._input.buffer + key, url))
                this._macros.set(this._currentMacro, this._macros.get(this._currentMacro) + key);
        }

        if (key == "<C-c>")
            liberator.interrupted = true;

        // feedingKeys needs to be separate from interrupted so
        // we can differentiate between a recorded <C-c>
        // interrupting whatever it's started and a real <C-c>
        // interrupting our playback.
        if (events.feedingKeys && !event.isMacro) {
            if (key == "<C-c>") {
                events.feedingKeys = false;
                if (modes.isReplaying) {
                    modes.isReplaying = false;
                    this.setTimeout(function () { liberator.echomsg("Canceled playback of macro '" + this._lastMacro + "'"); }, 100);
                }
            }
            else
                events.duringFeed.push(event);

            killEvent();
            return;
        }

        try {
            let stop = false;
            let win = document.commandDispatcher.focusedWindow;

            // special mode handling
            if (modes.isMenuShown) { // menus have their own command handlers
                stop = true;
            } else if (modes.passNextKey) { // handle Escape-one-key mode ('i')
                modes.passNextKey = false;
                stop = true;
            } else if (modes.passAllKeys) { // handle Escape-all-keys mode (Shift-Esc)
                if (key == "<S-Esc>" || key == "<Insert>") // FIXME: Don't hardcode!
                    modes.passAllKeys = false;

                // If we manage to get into command line mode while IGNOREKEYS, let the command line handle keys
                if (liberator.mode == modes.COMMAND_LINE)
                    stop = false;
                // If we are in the middle of a mapping, we never send the next key to the host app
                else if (this._input.buffer)
                    stop = false;
                // Respect "unignored" keys
                else if (modes._passKeysExceptions == null || modes._passKeysExceptions.indexOf(key) < 0)
                    stop = true;
            }

            if (stop) {
                this._input.buffer = "";
                return;
            }

            stop = true; // set to false if we should NOT consume this event but let the host app handle it

            // just forward event without checking any mappings when the MOW is open
            if (liberator.mode == modes.COMMAND_LINE && (modes.extended & modes.OUTPUT_MULTILINE)) {
                commandline.onMultilineOutputEvent(event);
                throw killEvent();
            }

            // XXX: ugly hack for now pass certain keys to the host app as
            // they are without beeping also fixes key navigation in combo
            // boxes, submitting forms, etc.
            // FIXME: breaks iabbr for now --mst
            if (key in config.ignoreKeys && (config.ignoreKeys[key] & liberator.mode)) {
                this._input.buffer = "";
                return;
            }

            // TODO: handle middle click in content area

            if (!isEscapeKey(key)) {
                // custom mode...
                if (liberator.mode == modes.CUSTOM) {
                    plugins.onEvent(event);
                    throw killEvent();
                }

                // All of these special cases for hint mode are driving
                // me insane! -Kris
                if (modes.extended & modes.HINTS) {
                    // under HINT mode, certain keys are redirected to hints.onEvent
                    if (key == "<Return>" || key == "<Tab>" || key == "<S-Tab>"
                        || key == mappings.getMapLeader()
                        || (key == "<BS>" && hints.previnput == "number")
                        || (hints._isHintNumber(key) && !hints.escNumbers)) {
                        hints.onEvent(event);
                        this._input.buffer = "";
                        throw killEvent();
                    }

                    // others are left to generate the 'input' event or handled by the host app
                    return;
                }
            }

            // FIXME (maybe): (is an ESC or C-] here): on HINTS mode, it enters
            // into 'if (map && !skipMap) below. With that (or however) it
            // triggers the onEscape part, where it resets mode. Here I just
            // return true, with the effect that it also gets to there (for
            // whatever reason).  if that happens to be correct, well..
            // XXX: why not just do that as well for HINTS mode actually?

            if (liberator.mode == modes.CUSTOM)
                return;

            let inputStr = this._input.buffer + key;
            let countStr = inputStr.match(/^[1-9][0-9]*|/)[0];
            let candidateCommand = inputStr.substr(countStr.length);
            let map = mappings[event.noremap ? "getDefault" : "get"](liberator.mode, candidateCommand, url);

            let candidates = mappings.getCandidates(liberator.mode, candidateCommand, url);
            if (candidates.length == 0 && !map) {
                map = this._input.pendingMap;
                this._input.pendingMap = null;
                if (map && map.arg)
                    this._input.pendingArgMap = map;
            }

            // counts must be at the start of a complete mapping (10j -> go 10 lines down)
            if (countStr && !candidateCommand) {
                // no count for insert mode mappings
                if (!modes.mainMode.count || modes.mainMode.input)
                    stop = false;
                else
                    this._input.buffer = inputStr;
            }
            else if (this._input.pendingArgMap) {
                this._input.buffer = "";
                let map = this._input.pendingArgMap;
                this._input.pendingArgMap = null;
                if (!isEscapeKey(key)) {
                    if (modes.isReplaying && !this.waitForPageLoad())
                        return;
                    map.execute(null, this._input.count, key);
                }
            }
            // only follow a map if there isn't a longer possible mapping
            // (allows you to do :map z yy, when zz is a longer mapping than z)
            else if (map && !event.skipmap && candidates.length == 0) {
                this._input.pendingMap = null;
                updateCount(countStr);
                this._input.buffer = "";
                if (map.arg) {
                    this._input.buffer = inputStr;
                    this._input.pendingArgMap = map;
                }
                else if (this._input.pendingMotionMap) {
                    if (!isEscapeKey(key))
                        this._input.pendingMotionMap.execute(candidateCommand, this._input.count, null);
                    this._input.pendingMotionMap = null;
                }
                // no count support for these commands yet
                else if (map.motion) {
                    this._input.pendingMotionMap = map;
                }
                else {
                    if (modes.isReplaying && !this.waitForPageLoad())
                        throw killEvent();

                    let ret = map.execute(null, this._input.count);
                    if (map.route && ret)
                        stop = false;
                }
            }
            else if (candidates.length > 0 && !event.skipmap) {
                updateCount(countStr);
                this._input.pendingMap = map;
                this._input.buffer += key;
            }
            else { // if the key is neither a mapping nor the start of one
                // the mode checking is necessary so that things like g<esc> do not beep
                if (this._input.buffer != "" && !event.skipmap &&
                    (liberator.mode & (modes.INSERT | modes.COMMAND_LINE | modes.TEXTAREA)))
                    events.feedkeys(this._input.buffer, { noremap: true, skipmap: true });

                this._input.buffer = "";
                this._input.pendingArgMap = null;
                this._input.pendingMotionMap = null;
                this._input.pendingMap = null;

                if (!isEscapeKey(key)) {
                    // allow key to be passed to the host app if we can't handle it
                    stop = false;

                    if (liberator.mode == modes.COMMAND_LINE) {
                        if (!(modes.extended & modes.INPUT_MULTILINE))
                            commandline.onEvent(event); // reroute event in command line mode
                    }
                    // beep on unrecognized keys
                    /*else if (!modes.mainMode.input)
                         liberator.beep();*/
                }
            }

            if (stop)
                killEvent();
        }
        catch (e) {
            if (e !== undefined)
                liberator.echoerr(e);
        }
        finally {
            let motionMap = (this._input.pendingMotionMap && this._input.pendingMotionMap.names[0]) || "";
            if (!(modes.extended & modes.HINTS))
                statusline.updateField("input", motionMap + this._input.buffer);
        }
    };
})();



			
    
    }
);
EOM

" vim: set ft=vimperator: